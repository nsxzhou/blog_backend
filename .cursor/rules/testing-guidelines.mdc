---
description: 
globs: 
alwaysApply: true
---
# 测试规范

## 单元测试原则

1. **测试文件命名**: 使用 `_test.go` 后缀，与被测试代码放在同一包中
   ```
   user.go       // 源代码
   user_test.go  // 测试代码
   ```

2. **测试函数命名**: 使用 `Test` 前缀，后接被测试函数名
   ```go
   // 测试 CreateUser 函数
   func TestCreateUser(t *testing.T) {
       // ...
   }
   
   // 测试不同场景
   func TestCreateUser_ValidInput(t *testing.T) {
       // ...
   }
   
   func TestCreateUser_InvalidInput(t *testing.T) {
       // ...
   }
   ```

3. **表驱动测试**: 优先使用表驱动测试，提高测试覆盖率
   ```go
   func TestCalculate(t *testing.T) {
       tests := []struct {
           name     string
           input    int
           expected int
           wantErr  bool
       }{
           {"positive number", 5, 10, false},
           {"zero", 0, 0, false},
           {"negative number", -5, 0, true},
       }
       
       for _, tt := range tests {
           t.Run(tt.name, func(t *testing.T) {
               got, err := Calculate(tt.input)
               if (err != nil) != tt.wantErr {
                   t.Errorf("unexpected error: %v", err)
               }
               if got != tt.expected {
                   t.Errorf("got %v, want %v", got, tt.expected)
               }
           })
       }
   }
   ```

## 模拟与依赖注入

1. 使用接口进行依赖注入，便于测试时替换依赖
2. 使用 `gomock` 或类似工具进行模拟
3. 创建测试工具函数简化重复设置

## 测试覆盖率

1. 目标代码覆盖率至少 80%
2. 使用以下命令检查覆盖率:
   ```bash
   go test -cover ./...
   go test -coverprofile=coverage.out ./...
   go tool cover -html=coverage.out
   ```

## 集成测试

1. 集成测试文件放在 `internal/test` 目录下
2. 使用 Docker 容器或内存数据库进行测试环境隔离
3. 清理测试产生的数据

## 性能测试

针对关键功能编写性能测试:
```go
func BenchmarkHandler(b *testing.B) {
    for i := 0; i < b.N; i++ {
        // 调用被测试函数
    }
}
```
